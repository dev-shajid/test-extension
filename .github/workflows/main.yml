name: Build and Release Chrome Extension

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history so git describe works

      # Step 2: Create a ZIP file of the extension
      - name: Create ZIP file of the extension
        run: |
          mkdir -p release
          zip -r release/outlier-earnings-masker.zip manifest.json content.js
          ls -la release/

      # Step 3: Upload the artifact (ZIP file)
      - name: Upload the artifact (ZIP)
        uses: actions/upload-artifact@v3
        with:
          name: outlier-earnings-masker
          path: release/outlier-earnings-masker.zip

  release:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write  # Give the token write permission

    steps:
      # Step 1: Checkout the repository with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history so git describe works

      # Step 2: Download the built artifact (ZIP file)
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: outlier-earnings-masker

      # Step 3: List files to verify artifact download
      - name: List downloaded files
        run: |
          ls -la 

      # Step 4: Get the latest release tag and increment the version
      - name: Get latest release tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            # Ensure valid semantic version splitting
            latest_tag=$(echo $latest_tag | sed 's/^v//')  # Strip leading 'v' if present
            IFS='.' read -r major minor patch <<< "$latest_tag"
            
            # Ensure major, minor, and patch are integers and increment patch
            patch=$((patch + 1))
            
            if [ -z "$major" ] || [ -z "$minor" ] || [ -z "$patch" ]; then
              echo "Error: Failed to parse version number."
              exit 1
            fi

            new_version="v$major.$minor.$patch"
          fi
          echo "::set-output name=version::$new_version"
          echo "Generated new version: $new_version"

      # Step 5: Debug Version
      - name: Debug Version
        run: 'echo "The version is: ${{ steps.get_tag.outputs.version }}"'

      # Step 6: Create a new release using the incremented version
      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.version }}  # Use the incremented version
          release_name: ${{ steps.get_tag.outputs.version }}  # Same as tag_name
          draft: false
          prerelease: false
